
/* Copyright (c) <2009> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/

%{
#include <dVirtualMachine.h>
#include "dAssemblerLexical.h"
#include "dAssemblerCompiler.h"
//
// Newton virtual machine assembler grammar
// based loosely on a subset of the MIPS R3000 and the Intel 386 instructions set 
//
%}






// very simple sample SLR(1) grammar 
%union 
{
	class dUserVariable
	{
		public:
		dUserVariable () 
			:m_token (dToken (0)), m_data("")
		{
		}
		
		
		dUserVariable (dToken token, const char* const text)
			:m_token(token), m_data (text) 
		{
		}
		dToken m_token;
		string m_data;
	};
}


	
%token i a
%start S1


%%
S1	: S				{printf ("%s\n", $1.m_data.c_str());}
	;
	
S	: i S e S		{$$.m_data = $1.m_data + $2.m_data + $3.m_data + $4.m_data;}
	| i S			{$$.m_data = $1.m_data + $2.m_data;}
	| a				{$$ = $1;}
	;
	
		
%%

