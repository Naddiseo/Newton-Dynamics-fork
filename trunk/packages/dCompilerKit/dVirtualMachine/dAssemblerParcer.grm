
/* Copyright (c) <2009> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/

%{
//
// Newton virtual machine assembler grammar
// based loosely on the MIPS R3000 Instruction Set 
//

#include <dVirtualMachine.h>

#include "dAssemblerLexical.h"
#include "dAssemblerCompiler.h"
%}

%token id
%start E

%%
E	: E '+'	T
	| T
	;
	
T	: '(' E ')'
	| id
	;
	

%%



/*

%start SegementList

%token BEGIN END
%token PUBLIC
%token INCLUDE

%token DATASEGMENT
%token CODESEGMENT

%token BYTE
%token WORD
%token DWORD
%token DOUBLE
%token OFFSET


%token LITERAL
%token REGISTER

%token INTERGER
%token FLOAT

%token LOADI ADD RET



%%

Module			: IncludeList SegementList END
				;


IncludeList		: IncludeList Include
				| Include
				| 
				;
				
Include			: INCLUDE '<' fileName '>'
				;


fileName		: LITERAL '.' LITERAL
				;			

SegementList	: SegmentList Segment
				| Segment
				| 
				;
				
Segment			: DataSegment
				| CodeSegment
				;


DataSegment		: DATASEGMENT ':' DataList  
				;


DataList		: DataList Data
				| Data
				|
				;
				
Data			: BYTE DataList
				| WORD DataList
				| DWORD DataList
				| QWORD DataList
				| DOUBLE DataList
				| OFFSET LITERAL INTERGER
				;
				
DataValueList	: DataValueList ',' DataValue
				| DataValue
				;
				
DataValue		: LITERAL INTERGER
				| LITERAL FLOAT
				;


CodeSegment		: CODESEGMENT ':' FuntionList   
				;


FuntionList     : FuntionList Function
				| Function
				|
				;
				
FunctionBody	: BEGIN LITERAL ':' instructionList	END	LITERAL
				| BEGIN LITERAL ':' PUBLIC instructionList END LITERAL
				;	
				
				
instructionList	: instructionList instruction
				| instruction
				;
				
				
instruction		: LOADI REGISTER ',' INTERGER			
				| ADD REGISTER ',' REGISTER	',' REGISTER		
				| RET
				;
				
				

%%

*/
