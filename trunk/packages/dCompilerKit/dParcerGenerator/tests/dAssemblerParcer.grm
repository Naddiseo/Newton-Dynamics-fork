/* Copyright (c) <2009> <Newton Game Dynamics>
* 
* This software is provided 'as-is', without any express or implied
* warranty. In no event will the authors be held liable for any damages
* arising from the use of this software.
* 
* Permission is granted to anyone to use this software for any purpose,
* including commercial applications, and to alter it and redistribute it
* freely
*/

%{
#include <dVirtualMachine.h>
#include "dAssemblerLexical.h"
#include "dAssemblerCompiler.h"
//
// Newton virtual machine assembler grammar
// based loosely on a subset and a hybrid between the MIPS R3000 and the Intel 386 instructions set 
//
%}


%union 
{
	class dUserVariable
	{
		public:
		dUserVariable () 
			:m_token (dToken (0)), m_data("")
		{
		}
		
		
		dUserVariable (dToken token, const char* const text)
			:m_token(token), m_data (text) 
		{
		}
		dToken m_token;
		string m_data;
	};
}


	
%token IMPORT LITERAL 

%token INT
%token INTEGER 


%start module


%%
module		: segmentList
			;
				
				
segmentList	: segment
			| segmentList segment
			|
			;
			
			
segment		: import
			| dataDeclaration	
//			| funtionDeclaration
			;
			
			
import		: IMPORT '<' fileName '>'
			; 			
			
fileName	: literal
			| fileName '.' literal
			;
			
dataDeclaration	: dataType literal						  {((dAssemblerCompiler*)this)->EmitUnInitilizedDataDeclaration ($1, $2);}		
				| dataType literal '=' constantExpression {((dAssemblerCompiler*)this)->EmitInitilizedDataDeclaration ($1, $2, $3);}
				;
				
constantExpression : INTEGER {$$ = ((dAssemblerCompiler*)this)->EmitIntegerConst ($1);}
				   ;	
				   
dataType		: INT {$$ = ((dAssemblerCompiler*)this)->EmitDataType ($1);}
				;				

literal			: LITERAL {$$ = ((dAssemblerCompiler*)this)->EmitSymbol ($1);}
				;	

				   

%%

